syntax = "proto3";

package ibc.applications.transfer.v2;

option go_package = "github.com/cosmos/ibc-go/v9/modules/apps/transfer/v2/types";

import "amino/amino.proto";
import "gogoproto/gogo.proto";
import "cosmos/msg/v1/msg.proto";
import "cosmos/base/v1beta1/coin.proto";
import "ibc/applications/transfer/v2/transfer.proto";

// Msg defines the ibc/transfer Msg service.
service Msg {
  option (cosmos.msg.v1.service) = true;

  // Transfer defines a rpc handler method for MsgTransfer.
  rpc Transfer(MsgTransfer) returns (MsgTransferResponse);
}

// MsgTransfer defines a msg to transfer fungible tokens (i.e Coins) between
// ICS20 enabled chains. See ICS Spec here:
// https://github.com/cosmos/ibc/tree/master/spec/app/ics-020-fungible-token-transfer#data-structures
message MsgTransfer {
  option (amino.name)           = "cosmos-sdk/MsgTransfer";
  option (cosmos.msg.v1.signer) = "sender";

  option (gogoproto.goproto_getters) = false;

  // the channel by which the packet will be sent
  string source_channel = 1;
  // the source port for the packet
  string source_port = 2;
  // the destination port for the packet
  string destination_port = 3;
  // TODO comment
  string version = 4;
  // TODO comment
  string encoding = 5;
  // the sender address
  string sender = 6;
  // the recipient address on the destination chain
  string receiver = 7;
  // Timeout timestamp in absolute nanoseconds since unix epoch.
  uint64 timeout_timestamp = 8;
  // optional memo
  string memo = 9;
  // tokens to be transferred
  repeated cosmos.base.v1beta1.Coin tokens = 10 [(gogoproto.nullable) = false];
  // optional forwarding information
  Forwarding forwarding = 11;
}

// MsgTransferResponse defines the Msg/Transfer response type.
message MsgTransferResponse {
  option (gogoproto.goproto_getters) = false;

  // sequence number of the transfer packet sent
  uint64 sequence = 1;
}
